"use strict";var ApplicationConfiguration=function(){var applicationModuleName="foosball",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("ranks"),ApplicationConfiguration.registerModule("scores"),ApplicationConfiguration.registerModule("steves"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$q","Authentication","Ranks",function($scope,$q,Authentication,Ranks){$scope.authentication=Authentication,$scope.data={},$scope.data.ranks=Ranks.query()}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("ranks").factory("Ranks",["$resource",function($resource){return $resource("ranks/:rankId",{rankId:"@_id"},{update:{method:"PUT"}})}]),angular.module("scores").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Scores","scores","dropdown","/scores(/create)?"),Menus.addSubMenuItem("topbar","scores","List Scores","scores"),Menus.addSubMenuItem("topbar","scores","New Score","scores/create")}]),angular.module("scores").config(["$stateProvider",function($stateProvider){$stateProvider.state("listScores",{url:"/scores",templateUrl:"modules/scores/views/list-scores.client.view.html"}).state("createScore",{url:"/scores/create",templateUrl:"modules/scores/views/create-score.client.view.html"}).state("viewScore",{url:"/scores/:scoreId",templateUrl:"modules/scores/views/view-score.client.view.html"}).state("editScore",{url:"/scores/:scoreId/edit",templateUrl:"modules/scores/views/edit-score.client.view.html"})}]),angular.module("scores").controller("ScoresController",["$scope","$stateParams","$location","Authentication","Scores","scoreUtils",function($scope,$stateParams,$location,Authentication,Scores,scoreUtils){$scope.authentication=Authentication,$scope.data={scores:Scores.query(),players:[]},$scope.data.scores.$promise.then(function(scores){$scope.data.players=scoreUtils.getPlayers(scores)}),$scope.create=function(){var score=new Scores({teamA:this.teamA,teamB:this.teamB,teamAScore:this.teamAScore,teamBScore:this.teamBScore});score.$save(function(response){$location.path("scores/"+response._id),$scope.teamA="",$scope.teamB="",$scope.teamAScore=0,$scope.teamBScore=0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(score){if(score){score.$remove();for(var i in $scope.scores)$scope.scores[i]===score&&$scope.scores.splice(i,1)}else $scope.score.$remove(function(){$location.path("scores")})},$scope.update=function(){var score=$scope.score;score.$update(function(){$location.path("scores/"+score._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.scores=Scores.query()},$scope.findOne=function(){$scope.score=Scores.get({scoreId:$stateParams.scoreId})}}]),angular.module("scores").factory("Scores",["$resource",function($resource){return $resource("scores/:scoreId",{scoreId:"@_id"},{update:{method:"PUT"}})}]).service("scoreUtils",[function(){var findTeamPlayers=function(team){return sortTeam(team.split(/,|and| /).filter(function(player){return""!==player}))},sortTeam=function(team){var sorted=team.slice();return sorted.sort(function(a,b){return a.localeCompare(b)})},teamKey=function(team){return sortTeam(team).join(", ")},teamsMatch=function(teamA,teamB,fuzzy){return fuzzy?teamA.every(function(player){return-1!==teamB.indexOf(player)}):teamKey(teamA)===teamKey(teamB)},byTeam=function(team,fuzzy){return function(game){var isTeamA=teamsMatch(team,game.teamA,fuzzy),isTeamB=teamsMatch(team,game.teamB,fuzzy);return isTeamA||isTeamB}},byWin=function(team,fuzzy){return function(game){var isTeamA=teamsMatch(team,game.teamA,fuzzy),isTeamB=teamsMatch(team,game.teamB,fuzzy),teamABeatTeamB=game.teamAScore>game.teamBScore,teamBBeatTeamA=game.teamBScore>game.teamAScore;return isTeamA&&teamABeatTeamB||isTeamB&&teamBBeatTeamA}},byLose=function(team,fuzzy){return function(game){var isTeamA=teamsMatch(team,game.teamA,fuzzy),isTeamB=teamsMatch(team,game.teamB,fuzzy),teamABeatTeamB=game.teamAScore>game.teamBScore,teamBBeatTeamA=game.teamBScore>game.teamAScore;return isTeamA&&teamBBeatTeamA||isTeamB&&teamABeatTeamB}},byDraw=function(){return function(game){return game.teamAScore===game.teamBScore}},percent=function(portion,of){return 0===of?0:portion/of*100},decimal=function(val,precision){return val.toFixed(precision>-1?precision:2)},mapTeamA=function(game){return game.teamA},mapTeamB=function(game){return game.teamB},findTeam=function(team,teams,fuzzy){return!teams.every(function(otherTeam){return!teamsMatch(team,otherTeam,fuzzy)})},uniqueTeams=function(allTeams){return allTeams.reduce(function(teams,team){return findTeam(team,teams)||teams.push(team),teams},[])},getTeams=function(games){var aTeams=games.map(mapTeamA),bTeams=games.map(mapTeamB),teams=aTeams.concat(bTeams);return uniqueTeams(teams)},uniquePlayers=function(allTeams){return uniqueTeams([].concat.apply([],allTeams).map(function(player){return[player]})).map(function(players){return players[0]})},getPlayers=function(games){var aTeams=games.map(mapTeamA),bTeams=games.map(mapTeamB),teams=aTeams.concat(bTeams);return uniquePlayers(teams)},getTeamGames=function(games,team,fuzzy){return games.filter(byTeam(team,fuzzy))},getTeamStats=function(games,team,fuzzy){var teamGames=getTeamGames(games,team,fuzzy),wins=teamGames.filter(byWin(team,fuzzy)),loses=teamGames.filter(byLose(team,fuzzy)),draws=teamGames.filter(byDraw());return{played:teamGames.length,wins:wins.length,loses:loses.length,draws:draws.length,winPercent:percent(wins.length,teamGames.length),lossPercent:percent(loses.length,teamGames.length),drawPercent:percent(draws.length,teamGames.length)}};return{findTeamPlayers:findTeamPlayers,sortTeam:sortTeam,teamKey:teamKey,teamsMatch:teamsMatch,byTeam:byTeam,byWin:byWin,byLose:byLose,byDraw:byDraw,percent:percent,decimal:decimal,mapTeamA:mapTeamA,mapTeamB:mapTeamB,findTeam:findTeam,uniqueTeams:uniqueTeams,getTeams:getTeams,uniquePlayers:uniquePlayers,getPlayers:getPlayers,getTeamGames:getTeamGames,getTeamStats:getTeamStats}}]),console.log("foo"),angular.module("steves").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Steves","steves","dropdown","/steves(/create)?"),Menus.addSubMenuItem("topbar","steves","List Steves","steves"),Menus.addSubMenuItem("topbar","steves","New Steve","steves/create")}]),angular.module("steves").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSteves",{url:"/steves",templateUrl:"modules/steves/views/list-steves.client.view.html"}).state("createSteve",{url:"/steves/create",templateUrl:"modules/steves/views/create-steve.client.view.html"}).state("viewSteve",{url:"/steves/:steveId",templateUrl:"modules/steves/views/view-steve.client.view.html"}).state("editSteve",{url:"/steves/:steveId/edit",templateUrl:"modules/steves/views/edit-steve.client.view.html"})}]),angular.module("steves").controller("StevesController",["$scope","$stateParams","$location","Authentication","Steves",function($scope,$stateParams,$location,Authentication,Steves){$scope.authentication=Authentication,$scope.create=function(){var steve=new Steves({name:this.name});steve.$save(function(response){$location.path("steves/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(steve){if(steve){steve.$remove();for(var i in $scope.steves)$scope.steves[i]===steve&&$scope.steves.splice(i,1)}else $scope.steve.$remove(function(){$location.path("steves")})},$scope.update=function(){var steve=$scope.steve;steve.$update(function(){$location.path("steves/"+steve._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.steves=Steves.query()},$scope.findOne=function(){$scope.steve=Steves.get({steveId:$stateParams.steveId})}}]),angular.module("steves").factory("Steves",["$resource",function($resource){return $resource("steves/:steveId",{steveId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);